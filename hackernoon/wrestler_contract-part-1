pragma solidity ^0.4.18;


        // example script for hackernoon example


                        // The wrestlers and other variables

contract Wrestling {

    address public wrestler1;
    address public wrestler2;
    address public theWinner;

    bool public wrestler1Played;
    bool public wrestler2Played;
    bool public gameFinished;

    uint private wrestler1Deposit;
    uint private wrestler2Deposit;
    uint gains;


                        // create the logs that will be used through contract

    event WrestlingStartsEvent(address wrestler1, address wrestler2);
  	event EndOfRoundEvent(uint wrestler1Deposit, uint wrestler2Deposit);
  	event EndOfWrestlingEvent(address winner, uint gains);


                        // construct contract

    constructor() public {
  		  wrestler1 = msg.sender;
  	}


                        // second wrestler registration

    function registerAsAnOpponent() public {
        require(wrestler2 == address(0));

        wrestler2 = msg.sender;

        emit WrestlingStartsEvent(wrestler1, wrestler2);
    }


                        // game play - every round ether can be deposited
                        // wrestler who deposits TWICE as much ether as the
                        // other wrestler WINS!!

    function wrestle() public payable {
      	require(!gameFinished && (msg.sender == wrestler1 || msg.sender == wrestler2));

      	if(msg.sender == wrestler1) {
      		  require(wrestler1Played == false);
      		  wrestler1Played = true;
      		  wrestler1Deposit = wrestler1Deposit + msg.value;
      	} else {
        		require(wrestler2Played == false);
        		wrestler2Played = true;
        		wrestler2Deposit = wrestler2Deposit + msg.value;
      	}
      	if(wrestler1Played && wrestler2Played) {
        		if(wrestler1Deposit >= wrestler2Deposit * 2) {
        			endOfGame(wrestler1);
        		} else if (wrestler2Deposit >= wrestler1Deposit * 2) {
        			endOfGame(wrestler2);
        		} else {
                    endOfRound();
        		}
        }
    }


                        // functions for end of round and end of game


    function endOfRound() internal {
      	wrestler1Played = false;
      	wrestler2Played = false;

      	emit EndOfRoundEvent(wrestler1Deposit, wrestler2Deposit);
    }

    function endOfGame(address winner) internal {
          gameFinished = true;
          theWinner = winner;

          gains = wrestler1Deposit + wrestler2Deposit;
          emit EndOfWrestlingEvent(winner, gains);
    }


                        // the function to withdraw money to the winner

    function withdraw() public {
          require(gameFinished && theWinner == msg.sender);

          uint amount = gains;

          gains = 0;
          msg.sender.transfer(amount);
    }

}
